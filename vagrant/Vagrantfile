# -*- mode: ruby -*-
# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = "2"

require 'yaml'
require 'rbconfig'

dir = File.dirname(File.expand_path(__FILE__))
configValues = YAML::load_file("#{dir}/config.yml")

if !configValues['vm']['provider']['virtualbox'].empty?
  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'
end

if !ENV['VAGRANT_CI'].nil?
  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'lxc'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = File.basename(configValues['vm']['box_url'])
  config.vm.box_url = "#{configValues['vm']['box_url']}"

  if !ENV['VAGRANT_CI'].nil?
    config.vm.box = "#{configValues['vm']['provider']['lxc']['box']}"
  end

  if configValues['vm']['hostname'].to_s != ''
    config.vm.hostname = "#{configValues['vm']['hostname']}"
  end

  # If hostsupdater plugin is installed, add all servernames as aliases.
  if Vagrant.has_plugin?("vagrant-hostsupdater")
    config.hostsupdater.aliases = []

    for host in ["#{configValues['project']}.dev"]
      config.hostsupdater.aliases.push(host)
    end
  end

  if configValues['vm']['network']['private_network'].to_s != ''
    config.vm.network "private_network", ip: "#{configValues['vm']['network']['private_network']}", lxc__bridge_name: "lxcbr0"
  end

  configValues['vm']['network']['forwarded_port'].each do |i, port|
    if port['guest'] != '' && port['host'] != ''
      config.vm.network :forwarded_port, guest: port['guest'].to_i, host: port['host'].to_i, auto_correct: true
    end
  end

  for folder in configValues['vm']['synced_folder'];
    config.vm.synced_folder folder['source'], folder['target'],
      id: folder['id'],
      type: "nfs",
      rsync__auto: "true",
      rsync__exclude: folder['excluded_paths'],
      rsync__args: ["--verbose", "--archive", "--delete", "-z", "--chmod=ugo=rwX"],
      :nfs => true,
      :linux__nfs_options => ['rw', 'no_subtree_check', 'no_root_squash', 'async']
  end

  config.vm.usable_port_range = (10200..10500)

  if !configValues['vm']['provider']['virtualbox'].empty?
    config.vm.provider :virtualbox do |virtualbox|
      configValues['vm']['provider']['virtualbox']['modifyvm'].each do |key, value|
        virtualbox.customize ["modifyvm", :id, "--#{key}", "#{value}"]
      end
    end
  end

  config.vm.provision "shell" do |s|
    s.path = "provisioning/shell/initial-setup.sh"
    s.args = "/vagrant/provisioning"
  end

  # Install Ansible inside the box.
  config.vm.provision :shell, :path => "provisioning/shell/ansible.sh"
  # Install Ansible playbooks inside the box.
  config.vm.provision :shell, :path => "provisioning/ansible/run-ansible-playbook.sh"

  # Install Drupal site.
  if !ENV['VAGRANT_CI'].nil?
    config.vm.provision :shell, :inline => "/var/www/ansible.sh reinstall" + (RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/ ? " --windows" : "")
  end

  config.ssh.username = configValues['vm']['ssh']['username']
  config.ssh.shell = "sh"
  config.ssh.insert_key = "false"
  config.ssh.forward_agent = true
end
